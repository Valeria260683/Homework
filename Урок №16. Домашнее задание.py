"""Реализовать паттерн 'Итератор' """
# Шаблон проектирования 'Итератор' представляет собой
# поведенческий шаблон, который позволяет последовательно
# обходить элементы составного обьекта, не раскрывая
# его внутреннего представления.
# Для его реализации в Python создаем класс, реализующий
# протокол итератора. Протокол итератора включает в себя
# методы '__iter__()' и __next__().

class MyIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0
    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        value = self.data[self.index]
        self.index += 1
        return value

# Пример использования итератора:
iterator = MyIterator([1, 2, 3, 4, 5])
for item in iterator:
    print(item)
# В данном примере class MyIterator, это итератор,
# который обходит элементы списка 'data'. Метод
#__iter__() возвращает сам итератор, а метод
#__next__() возвращает следующий элемент
# последовательности при каждом вызове, пока
# не будет достигнут конец последовательности.
# При создании обьекта итератора можно использовать
# цикл for, который будет последовательно обходить
# элементы списка и выводить их на экран
